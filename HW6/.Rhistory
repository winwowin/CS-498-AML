MASS
install.packages("MASS")
Boston {MASS}
library(MASS)
data("Boston")
head(Boston)
head(Boston)
b <- data("Boston")
library("MASS", lib.loc="~/R/win-library/3.5")
install.packages("MASS")
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=b)
invalid 'envir' argument of type 'character'
b <- data(Boston)
b <- data("Boston")
library(MASS)
b <- data("Boston")
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=b)
library(MASS)
b <- data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=b)
library(MASS)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(fit)
plot(fit1)
library(MASS)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(fit1)
library(MASS)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(fit1)
library(plotly)
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
plt4 <- regMat %>%
plot_ly(x = Leverage, y = Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS3$x, y = LOESS3$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Leverage vs Residuals", plot_bgcolor = "#e6e6e6")
RegressionPlots <- function(fit){
# Extract fitted values from lm() object
Fitted.Values <-  fitted(fit)
# Extract residuals from lm() object
Residuals <-  resid(fit)
# Extract standardized residuals from lm() object
Standardized.Residuals <- MASS::stdres(fit)
# Extract fitted values for lm() object
Theoretical.Quantiles <- qqnorm(Residuals, plot.it = F)$x
# Square root of abs(residuals)
Root.Residuals <- sqrt(abs(Standardized.Residuals))
# Calculate Leverage
Leverage <- lm.influence(fit)$hat
# Create data frame
# Will be used as input to plot_ly
regMat <- data.frame(Fitted.Values,
Residuals,
Standardized.Residuals,
Theoretical.Quantiles,
Root.Residuals,
Leverage)
# Plot using Plotly
# Fitted vs Residuals
# For scatter plot smoother
LOESS1 <- loess.smooth(Fitted.Values, Residuals)
plt1 <- regMat %>%
plot_ly(x = Fitted.Values, y = Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS1$x, y = LOESS1$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Residuals vs Fitted Values", plot_bgcolor = "#e6e6e6", width = 1000)
# QQ Pot
plt2 <- regMat %>%
plot_ly(x = Theoretical.Quantiles, y = Standardized.Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = Theoretical.Quantiles, y = Theoretical.Quantiles, type = "scatter", mode = "line", name = "",
line = list(width = 2)) %>%
layout(title = "Q-Q Plot", plot_bgcolor = "#e6e6e6")
# Scale Location
# For scatter plot smoother
LOESS2 <- loess.smooth(Fitted.Values, Root.Residuals)
plt3 <- regMat %>%
plot_ly(x = Fitted.Values, y = Root.Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS2$x, y = LOESS2$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Scale Location", plot_bgcolor = "#e6e6e6", width = 1000)
# Residuals vs Leverage
# For scatter plot smoother
LOESS3 <- loess.smooth(Leverage, Residuals)
plt4 <- regMat %>%
plot_ly(x = Leverage, y = Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS3$x, y = LOESS3$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Leverage vs Residuals", plot_bgcolor = "#e6e6e6")
plt = list(plt1, plt2, plt3, plt4)
return(plt)
}
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit)
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
# par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(fit1)
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
# par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
# plot(fit1)
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
# par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
# plot(fit1)
RegressionPlots <- function(fit){
# Extract fitted values from lm() object
Fitted.Values <-  fitted(fit)
# Extract residuals from lm() object
Residuals <-  resid(fit)
# Extract standardized residuals from lm() object
Standardized.Residuals <- MASS::stdres(fit)
# Extract fitted values for lm() object
Theoretical.Quantiles <- qqnorm(Residuals, plot.it = F)$x
# Square root of abs(residuals)
Root.Residuals <- sqrt(abs(Standardized.Residuals))
# Calculate Leverage
Leverage <- lm.influence(fit)$hat
# Create data frame
# Will be used as input to plot_ly
regMat <- data.frame(Fitted.Values,
Residuals,
Standardized.Residuals,
Theoretical.Quantiles,
Root.Residuals,
Leverage)
# Plot using Plotly
# Fitted vs Residuals
# For scatter plot smoother
LOESS1 <- loess.smooth(Fitted.Values, Residuals)
plt1 <- regMat %>%
plot_ly(x = Fitted.Values, y = Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS1$x, y = LOESS1$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Residuals vs Fitted Values", plot_bgcolor = "#e6e6e6", width = 1000)
# QQ Pot
plt2 <- regMat %>%
plot_ly(x = Theoretical.Quantiles, y = Standardized.Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = Theoretical.Quantiles, y = Theoretical.Quantiles, type = "scatter", mode = "line", name = "",
line = list(width = 2)) %>%
layout(title = "Q-Q Plot", plot_bgcolor = "#e6e6e6")
# Scale Location
# For scatter plot smoother
LOESS2 <- loess.smooth(Fitted.Values, Root.Residuals)
plt3 <- regMat %>%
plot_ly(x = Fitted.Values, y = Root.Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS2$x, y = LOESS2$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Scale Location", plot_bgcolor = "#e6e6e6", width = 1000)
# Residuals vs Leverage
# For scatter plot smoother
LOESS3 <- loess.smooth(Leverage, Residuals)
plt4 <- regMat %>%
plot_ly(x = Leverage, y = Residuals,
type = "scatter", mode = "markers", hoverinfo = "x+y", name = "Data",
marker = list(size = 10, opacity = 0.5), showlegend = F) %>%
add_trace(x = LOESS3$x, y = LOESS3$y, type = "scatter", mode = "line", name = "Smooth",
line = list(width = 2)) %>%
layout(title = "Leverage vs Residuals", plot_bgcolor = "#e6e6e6")
plt = list(plt1, plt2, plt3, plt4)
return(plt)
}
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
# par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
# plot(fit1)
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
library(MASS)
library(plotly)
data(Boston)
head(Boston)
fit1 <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data=Boston)
plt = RegressionPlots(fit1)
# par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
# plot(fit1)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
text = c("Text A", "Text B", "Text C", "Text D", "Text E")
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
Boston
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
fit1
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
fit1
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
install.packages("glmnet")
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
source('~/2019SP/CS498AML/R/6/CS498AML-HW6/HW6.R', echo=TRUE)
